<div id="editorjs">
  <div class="entity-icon">Content</div>
  <input type="hidden" name="editor_content" class="editorContent">
  <!-- <div class="ce-example__button" id="saveButton">
    editor.save()
  </div> -->
</div>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@latest"></script><!-- Header -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/simple-image@latest"></script><!-- Image -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/delimiter@latest"></script><!-- Delimiter -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest"></script><!-- List -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/checklist@latest"></script><!-- Checklist -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/quote@latest"></script><!-- Quote -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/code@latest"></script><!-- Code -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/embed@latest"></script><!-- Embed -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/table@latest"></script><!-- Table -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/link@latest"></script><!-- Link -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/warning@latest"></script><!-- Warning -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/marker@latest"></script><!-- Marker -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/inline-code@latest"></script><!-- Inline Code -->
<script>
    /**
     * Saving button
     */
    //  const saveButton = document.getElementById('saveButton');
    /**
     * To initialize the Editor, create a new instance with configuration object
     * @see docs/installation.md for mode details
     */
     let contentData = '<%-contentData%>' || null
     console.log("rererere", contentData)
    var editor = new EditorJS({
      /**
       * Wrapper of Editor
       */
      holderId: 'editorjs',
      /**
       * Tools list
       */
      tools: {
        /**
         * Each Tool is a Plugin. Pass them via 'class' option with necessary settings {@link docs/tools.md}
         */
        header: {
          class: Header,
          inlineToolbar: ['link'],
          config: {
            placeholder: 'Header'
          },
          shortcut: 'CMD+SHIFT+H'
        },
        /**
         * Or pass class directly without any configuration
         */
        image: {
          class: SimpleImage,
          inlineToolbar: ['link'],
        },
        list: {
          class: List,
          inlineToolbar: true,
          shortcut: 'CMD+SHIFT+L'
        },
        checklist: {
          class: Checklist,
          inlineToolbar: true,
        },
        quote: {
          class: Quote,
          inlineToolbar: true,
          config: {
            quotePlaceholder: 'Enter a quote',
            captionPlaceholder: 'Quote\'s author',
          },
          shortcut: 'CMD+SHIFT+O'
        },
        warning: Warning,
        marker: {
          class:  Marker,
          shortcut: 'CMD+SHIFT+M'
        },
        code: {
          class:  CodeTool,
          shortcut: 'CMD+SHIFT+C'
        },
        delimiter: Delimiter,
        inlineCode: {
          class: InlineCode,
          shortcut: 'CMD+SHIFT+C'
        },
        linkTool: LinkTool,
        embed: Embed,
        table: {
          class: Table,
          inlineToolbar: true,
          shortcut: 'CMD+ALT+T'
        },
      },
      /**
       * This Tool will be used as default
       */
      // initialBlock: 'paragraph',
      /**
       * Initial Editor data
       */

      data: contentData != null? JSON.parse(contentData): {},
      onReady: function(){
        // saveButton.click();
      },
      onChange: function(api, event) {
        console.log('something changed', api);
        api.saver.save().then(outputData => {
          console.log('Article data:', outputData)
        }).catch(err => {
          console.log('Saving failed', error);
        })
      }
    });
    /**
     * Saving example
     */
    // saveButton.addEventListener('click', function () {
    //   editor.save().then((savedData) => {
    //     cPreview.show(savedData, document.getElementById("output"));
    //   });
    // });
    
    document.addEventListener('DOMContentLoaded', () => {
      const btnSubmit = document.querySelector('form#app-form button[type="submit"]');
      console.log(document.querySelector('form#app-form button[type="submit"]'));
      btnSubmit.addEventListener('click', async function(e) {
        e.preventDefault();
        const content = await editor.save();
        console.log('Editor data::', content)
        
        document.querySelector('#editorjs .editorContent').value= JSON.stringify(content);
  
        // this.submit();
        document.querySelector('form#app-form').submit();
      })
    })

</script>